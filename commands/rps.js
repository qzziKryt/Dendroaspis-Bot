const { MessageEmbed } = require("discord.js");

const ROCK = "‚õ∞Ô∏è";
const PAPER = "üì∞";
const SCISSORS = "‚úÇÔ∏è";
const emojiArray = [ROCK, PAPER, SCISSORS];
const DISAPPOINTED = "üòû";

exports.execute = async (client, message, args) => {
  try {
    const embedMsg = new MessageEmbed()
      .setColor("#9479A3")
      .setDescription("–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, 1, 2, 3!");

    const msg = await message.channel.send(embedMsg);
    const reacted = await promptMessage(msg, message.author, 30, emojiArray);

    // If they didn't respond back in time
    if (!reacted) {
      await msg.reactions.removeAll();
      return msg.edit(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ${DISAPPOINTED}`);
    }

    const botChoice = emojiArray[Math.floor(Math.random() * emojiArray.length)];

    const result = getResult(reacted, botChoice);
    await msg.reactions.removeAll().catch((err) => {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: ", err);
    });

    embedMsg.setDescription("").addField(result, `${reacted} vs ${botChoice}`);
    msg.edit(embedMsg);
  } catch (error) {
    console.error(error);
  }
};

// –í–∞—à –∫–æ–¥ getResult –∏ promptMessage –∑–¥–µ—Å—å

async function promptMessage(message, author, time, validReactions) {
  time *= 1000; // Convert from s to ms

  async function setReactions() {
    for (const reaction of validReactions) {
      message.react(reaction).catch((err) => {
        message.channel.send("I had trouble reacting with those emojis...");
        console.error("promptMessage error: ", err);
      });
    }
  }

  await setReactions();

  const filter = (reaction, user) =>
    validReactions.includes(reaction.emoji.name) && user.id === author.id;

  return message
    .awaitReactions(filter, { max: 1, time: time })
    .then((collected) => collected.first() && collected.first().emoji.name)
    .catch((err) => {
      console.error("Error in promptMessage: ", err);
    });
}

function getResult(me, botChosen) {
  // User wins
  if (
    (me === ROCK && botChosen === SCISSORS) ||
    (me === PAPER && botChosen === ROCK) ||
    (me === SCISSORS && botChosen === PAPER)
  ) {
    return "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
  } else if (me === botChosen) {
    return "–ù–∏—á—å—è!";
  } else {
    return "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!";
  }
}

exports.help = {
    name: "rps",
    aliases: ["—é–∑–µ—Ñ–∞"],
    usage: `rps`
}
